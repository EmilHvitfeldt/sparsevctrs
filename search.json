[{"path":"https://emilhvitfeldt.github.io/sparsevctrs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sparsevctrs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/articles/design.html","id":"altrep-functions","dir":"Articles","previous_headings":"","what":"Altrep Functions","title":"Design behind sparsevctrs","text":"functions sparse_double() relatives used construct sparse vectors noted type. work need 4 pieces information: values positions length default (defaults 0) values need match type function name easily coerced type (double -> integer). positions integers doubles can losslessly turned integers. length single non-negative integer-like value. Values positions paired, thus expected length, furthermore, positions expected sorted increasing order duplicates. ordering done let various extraction methods work efficiently possible. functions quite strict input checking choice, allow inner workings efficient possible. input functions mirrors values stored ALTREP class produce.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/articles/design.html","id":"converting-functions","dir":"Articles","previous_headings":"","what":"Converting Functions","title":"Design behind sparsevctrs","text":"3 functions fall category: coerce_to_sparse_data_frame() coerce_to_sparse_tibble() coerce_to_sparse_matrix() first two take sparse matrix Matrix package produce data.frame/tibble sparse columns. last one takes data.frame/tibble sparse columns produces sparse matrix using Matrix package. functions expected inverse , coerce_to_sparse_matrix(coerce_to_sparse_data_frame(x)) returns x back. made highly performant terms speed memory consumption, Meaning sparsity applied appropriate. functions quite strict input checking choice, allow inner workings efficient possible. part data.frames sparse vectors different can’t used coerce_to_sparse_matrix() yet.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/articles/design.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper Functions","title":"Design behind sparsevctrs","text":"3 types helper functions. First, is_* family functions. specific is_sparse_double() general is_sparse_vector() can used way determine whether vector ALTREP sparse vector. otherwise hard tell .numeric() can’t tell difference. Secondly, extraction functions. sparse_values() sparse_positions(). extract values positions respectively, without materializing whole dense vector. functions made work non-sparse vectors well make ergonomic user. Internally call is_sparse_vector(), choice return something useful alternative wasn’t hard. sparse_length() function length() works types last type helper function less clearly defined expanded needed. functions provide alternatives functions don’t ALTREP support. mean(). Calling mean() sparse vector force materialization, calculate mean. memory inefficient calculated like . functions, starting name prefix sparse_*, made work non-sparse vectors reasons listed regarding ergonomic use.","code":"sum(sparse_values(x)) / length(x)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/articles/design.html","id":"faq","dir":"Articles","previous_headings":"","what":"FAQ","title":"Design behind sparsevctrs","text":"aren’t results returned {vctrs} classes? stands right now, viewed beneficial users alerted vectors expected used internally packages rarely end user. Furthermore sparse vectors produce result dense vectors class() big plus. package try replace {Matrix} package? . sparse vector types provided package mimic created Matrix::sparseVector(). work different types allow different defaults. None matrix operations reimplemented .","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E (2024). sparsevctrs: Sparse Vectors Use Data Frames. R package version 0.0.0.9000,  https://emilhvitfeldt.github.io/sparsevctrs/, https://github.com/EmilHvitfeldt/sparsevctrs.","code":"@Manual{,   title = {sparsevctrs: Sparse Vectors For Use in Data Frames},   author = {Emil Hvitfeldt},   year = {2024},   note = {R package version 0.0.0.9000,  https://emilhvitfeldt.github.io/sparsevctrs/},   url = {https://github.com/EmilHvitfeldt/sparsevctrs}, }"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/index.html","id":"sparsevctrs","dir":"","previous_headings":"","what":"Sparse Vectors For Use in Data Frames","title":"Sparse Vectors For Use in Data Frames","text":"goal sparsevctrs provide sparse vector ALTREP class. , can sparse data form sparse columns data.frame tibble. Due nature ALTREP vectors work, sparse vectors behave like normal dense vectors used . vectors contain sparseness much can, materialize .","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sparse Vectors For Use in Data Frames","text":"can install development version sparsevctrs like :","code":"remotes::install_github(\"emilhvitfeldt/sparsevctrs\")"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Sparse Vectors For Use in Data Frames","text":"sparse vector, specifically sparse double vector, identical dense counterpart, often smaller memory footprint. memory sparse vector proportional number elements plus constant. means increasing length sparse vector doesn’t increase much memory uses. Unlike dense vectors much smaller constant, increases according length values. sparse vectors compatible tibbles data frames.","code":"library(sparsevctrs) library(lobstr)  x_sparse <- sparse_double(value = c(3, 1, 10), position = c(2, 7, 15), length = 1000) x_dense <- numeric(1000) x_dense[2] <- 3 x_dense[7] <- 1 x_dense[15] <- 10  obj_size(x_sparse) #> 1.24 kB obj_size(x_dense) #> 8.05 kB  identical(x_sparse, x_dense) #> [1] TRUE x_sparse_0 <- sparse_double(numeric(), integer(), length = 0) x_sparse_1000 <- sparse_double(numeric(), integer(), length = 1000) x_sparse_1000000 <- sparse_double(numeric(), integer(), length = 10000000)  obj_size(x_sparse_0) #> 1.19 kB obj_size(x_sparse_1000) #> 1.19 kB obj_size(x_sparse_1000000) #> 1.19 kB  x_dense_0 <- numeric(0) x_dense_1000 <- numeric(1000) x_dense_1000000 <- numeric(10000000)  obj_size(x_dense_0) #> 48 B obj_size(x_dense_1000) #> 8.05 kB obj_size(x_dense_1000000) #> 80.00 MB library(tibble) set.seed(1234)  tibble(   x = sample(1:1000),   y = sparse_double(1, 7, 1000) ) #> # A tibble: 1,000 × 2 #>        x     y #>    <int> <dbl> #>  1   284     0 #>  2   848     0 #>  3   918     0 #>  4   101     0 #>  5   623     0 #>  6   905     0 #>  7   645     1 #>  8   934     0 #>  9   400     0 #> 10   900     0 #> # ℹ 990 more rows"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Sparse Vectors For Use in Data Frames","text":"Sparse data happens ingestion preprocessing calculations. text counts, dummy variables etc etc computational tools calculations using sparse matrices, specifically Matrix package modeling packages (e.g., xgboost, glmnet, etc.). want utilize tools best can without making redundant implementations. However, sparse matrices great data general, least end, mathematical calculations occur. Converting everything “numeric” problematic dates, factors, etc. good reasons data frames created first place. Matrices efficient primitive. problem many tools, especially tidyverse, rely data frames since expressive accommodate different variable types. need merge filter rows/columns, etc, flexible user-friendly way. (joins, pivoting) sparse representation data allows us use modern data manipulation interfaces, keeps memory overhead low, can efficiently converted primitive matrix format can let Matrix packages best. achieved package, providing sparse vectors fit data frame. Along converting tools sparse matrices data frames.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce-vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce numeric vector to sparse double — coerce-vector","title":"Coerce numeric vector to sparse double — coerce-vector","text":"Takes numeric vector, integer double, turn sparse double vector.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce-vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce numeric vector to sparse double — coerce-vector","text":"","code":"as_sparse_double(x, default = 0)  as_sparse_integer(x, default = 0L)  as_sparse_character(x, default = \"\")  as_sparse_logical(x, default = FALSE)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce-vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce numeric vector to sparse double — coerce-vector","text":"x numeric vector. default default value use. Defaults 0. values x must double integer. must contain Inf NaN values.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce-vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce numeric vector to sparse double — coerce-vector","text":"","code":"x_dense <- c(3, 0, 2, 0, 0, 0, 4, 0, 0, 0) x_sparse <- as_sparse_double(x_dense) x_sparse #>  [1] 3 0 2 0 0 0 4 0 0 0  is_sparse_double(x_sparse)  #> [1] TRUE"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"Turning sparse matrix data frame","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"","code":"coerce_to_sparse_data_frame(x)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"x sparse matrix.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"requirement sparse matrix contains column names.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"","code":"set.seed(1234) mat <- matrix(sample(0:1, 100, TRUE, c(0.9, 0.1)), nrow = 10) colnames(mat) <- letters[1:10] sparse_mat <- Matrix::Matrix(mat, sparse = TRUE) sparse_mat #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                           #>  [1,] . . . . . . . . 1 . #>  [2,] . . . . . . . . . 1 #>  [3,] . . . . . . . . . . #>  [4,] . 1 . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . 1 . . . . . . . #>  [9,] . . . 1 . . . . . . #> [10,] . . . . . . . . . .  res <- coerce_to_sparse_data_frame(sparse_mat) res #>    a b c d e f g h i j #> 1  0 0 0 0 1 1 1 1 1 0 #> 2  0 0 0 0 0 0 0 0 0 1 #> 3  0 0 0 0 0 0 0 0 0 0 #> 4  1 1 0 0 0 0 0 0 0 0 #> 5  0 0 0 0 0 0 0 0 0 0 #> 6  0 0 0 0 0 0 0 0 0 0 #> 7  0 0 0 0 0 0 0 0 0 0 #> 8  0 0 1 0 0 0 0 0 0 0 #> 9  0 0 0 1 1 1 1 1 0 0 #> 10 0 0 0 0 0 0 0 0 0 0  # All columns are sparse vapply(res, is_sparse_vector, logical(1)) #>    a    b    c    d    e    f    g    h    i    j  #> TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"Turning data frame sparse columns sparse matrix using Matrix::sparseMatrix().","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"","code":"coerce_to_sparse_matrix(x)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"x data frame tibble sparse columns.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"checking currently x determine whether contains sparse columns . Thus works data frame. Needless say, creating sparse matrix dense data frame ideal.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"","code":"set.seed(1234) sparse_tbl <- lapply(1:10, function(x) sparse_double(x, x, length = 10)) names(sparse_tbl) <- letters[1:10] sparse_tbl <- as.data.frame(sparse_tbl) sparse_tbl #>    a b c d e f g h i  j #> 1  1 0 0 0 0 0 0 0 0  0 #> 2  0 2 0 0 0 0 0 0 0  0 #> 3  0 0 3 0 0 0 0 0 0  0 #> 4  0 0 0 4 0 0 0 0 0  0 #> 5  0 0 0 0 5 0 0 0 0  0 #> 6  0 0 0 0 0 6 0 0 0  0 #> 7  0 0 0 0 0 0 7 0 0  0 #> 8  0 0 0 0 0 0 0 8 0  0 #> 9  0 0 0 0 0 0 0 0 9  0 #> 10 0 0 0 0 0 0 0 0 0 10  res <- coerce_to_sparse_matrix(sparse_tbl) res #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                         #> 1  1 . . . . . . . .  . #> 2  . 2 . . . . . . .  . #> 3  . . 3 . . . . . .  . #> 4  . . . 4 . . . . .  . #> 5  . . . . 5 . . . .  . #> 6  . . . . . 6 . . .  . #> 7  . . . . . . 7 . .  . #> 8  . . . . . . . 8 .  . #> 9  . . . . . . . . 9  . #> 10 . . . . . . . . . 10"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"Turning sparse matrix tibble.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"","code":"coerce_to_sparse_tibble(x)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"x sparse matrix.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"requirement sparse matrix contains column names.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/coerce_to_sparse_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"","code":"set.seed(1234) mat <- matrix(sample(0:1, 100, TRUE, c(0.9, 0.1)), nrow = 10) colnames(mat) <- letters[1:10] sparse_mat <- Matrix::Matrix(mat, sparse = TRUE) sparse_mat #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                           #>  [1,] . . . . . . . . 1 . #>  [2,] . . . . . . . . . 1 #>  [3,] . . . . . . . . . . #>  [4,] . 1 . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . 1 . . . . . . . #>  [9,] . . . 1 . . . . . . #> [10,] . . . . . . . . . .  res <- coerce_to_sparse_tibble(sparse_mat) res #> # A tibble: 10 × 10 #>        a     b     c     d     e     f     g     h     i     j #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     0     0     0     0     1     1     1     1     1     0 #>  2     0     0     0     0     0     0     0     0     0     1 #>  3     0     0     0     0     0     0     0     0     0     0 #>  4     1     1     0     0     0     0     0     0     0     0 #>  5     0     0     0     0     0     0     0     0     0     0 #>  6     0     0     0     0     0     0     0     0     0     0 #>  7     0     0     0     0     0     0     0     0     0     0 #>  8     0     0     1     0     0     0     0     0     0     0 #>  9     0     0     0     1     1     1     1     1     0     0 #> 10     0     0     0     0     0     0     0     0     0     0  # All columns are sparse vapply(res, is_sparse_vector, logical(1)) #>    a    b    c    d    e    f    g    h    i    j  #> TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/extractors.html","id":null,"dir":"Reference","previous_headings":"","what":"Information extraction from sparse vectors — extractors","title":"Information extraction from sparse vectors — extractors","text":"Extract positions, values, default sparse vectors without need materialize vector.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/extractors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information extraction from sparse vectors — extractors","text":"","code":"sparse_positions(x)  sparse_values(x)  sparse_default(x)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/extractors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information extraction from sparse vectors — extractors","text":"x vector extracted .","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/extractors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information extraction from sparse vectors — extractors","text":"sparse_default() returns NA applied non-sparse vectors. done indicator non-sparsity. ease use, functions also works non-sparse variables.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/extractors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information extraction from sparse vectors — extractors","text":"","code":"x_sparse <- sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10) x_dense <- c(0, pi, 0, 0, 0.5, 0, 0, 0, 0, 0.1)  sparse_positions(x_sparse) #> [1]  2  5 10 sparse_values(x_sparse) #> [1] 3.141593 5.000000 0.100000 sparse_default(x_sparse) #> [1] 0  sparse_positions(x_dense) #>  [1]  1  2  3  4  5  6  7  8  9 10 sparse_values(x_dense) #>  [1] 0.000000 3.141593 0.000000 0.000000 0.500000 0.000000 0.000000 0.000000 #>  [9] 0.000000 0.100000 sparse_default(x_dense) #> [1] NA  x_sparse_3 <- sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10, default = 3) sparse_default(x_sparse_3) #> [1] 3"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse character vector — sparse_character","title":"Create sparse character vector — sparse_character","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse character vector — sparse_character","text":"","code":"sparse_character(values, positions, length, default = \"\")"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse character vector — sparse_character","text":"values integer vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default integer value, value indices specified positions. Defaults \"\". NA.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse character vector — sparse_character","text":"values positions expected length, allowed zero length. Allowed values value character values. Missing values NA NA_real_ allowed turned NA_character_. Everything else disallowed. values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse character vector — sparse_character","text":"","code":"sparse_character(character(), integer(), 10) #>  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"  sparse_character(c(\"A\", \"C\", \"E\"), c(2, 5, 10), 10) #>  [1] \"\"  \"A\" \"\"  \"\"  \"C\" \"\"  \"\"  \"\"  \"\"  \"E\"  str(   sparse_character(c(\"A\", \"C\", \"E\"), c(2, 5, 10), 1000000000) ) #>  chr [1:1000000000] \"\" \"A\" \"\" \"\" \"C\" \"\" \"\" \"\" \"\" \"E\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" ..."},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_double.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse double vector — sparse_double","title":"Create sparse double vector — sparse_double","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_double.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse double vector — sparse_double","text":"","code":"sparse_double(values, positions, length, default = 0)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_double.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse double vector — sparse_double","text":"values double vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default double value, value indices specified positions. Defaults 0. NA.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_double.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse double vector — sparse_double","text":"values positions expected length, allowed zero length. Allowed values value double integer values. integer values coerced doubles. Missing values NA NA_real_ allowed. Everything else disallowed, includes Inf NaN. values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_double.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse double vector — sparse_double","text":"","code":"sparse_double(numeric(), integer(), 10) #>  [1] 0 0 0 0 0 0 0 0 0 0  sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10) #>  [1] 0.000000 3.141593 0.000000 0.000000 5.000000 0.000000 0.000000 0.000000 #>  [9] 0.000000 0.100000  str(   sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 1000000000) ) #>  num [1:1000000000] 0 3.14 0 0 5 ..."},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse integer vector — sparse_integer","title":"Create sparse integer vector — sparse_integer","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse integer vector — sparse_integer","text":"","code":"sparse_integer(values, positions, length, default = 0L)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse integer vector — sparse_integer","text":"values integer vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default integer value, value indices specified positions. Defaults 0L. NA.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse integer vector — sparse_integer","text":"values positions expected length, allowed zero length. Allowed values value integer values. means double vector c(1, 5, 4) accepted can losslessly converted integer vector c(1L, 5L, 4L). Missing values NA NA_real_ allowed. Everything else disallowed, includes Inf NaN. values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse integer vector — sparse_integer","text":"","code":"sparse_integer(integer(), integer(), 10) #>  [1] 0 0 0 0 0 0 0 0 0 0  sparse_integer(c(4, 5, 7), c(2, 5, 10), 10) #>  [1] 0 4 0 0 5 0 0 0 0 7  str(   sparse_integer(c(4, 5, 7), c(2, 5, 10), 1000000000) ) #>  int [1:1000000000] 0 4 0 0 5 0 0 0 0 7 ..."},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse logical vector — sparse_logical","title":"Create sparse logical vector — sparse_logical","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse logical vector — sparse_logical","text":"","code":"sparse_logical(values, positions, length, default = FALSE)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse logical vector — sparse_logical","text":"values logical vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default logical value, value indices specified positions. Defaults FALSE. NA.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_logical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse logical vector — sparse_logical","text":"values positions expected length, allowed zero length. Allowed values value logical values. Missing values NA NA_real_ allowed. Everything else disallowed, values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparse_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse logical vector — sparse_logical","text":"","code":"sparse_logical(logical(), integer(), 10) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  sparse_logical(c(TRUE, NA, TRUE), c(2, 5, 10), 10) #>  [1] FALSE  TRUE FALSE FALSE    NA FALSE FALSE FALSE FALSE  TRUE  str(   sparse_logical(c(TRUE, NA, TRUE), c(2, 5, 10), 1000000000) ) #>  logi [1:1000000000] FALSE TRUE FALSE FALSE NA FALSE ..."},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparsevctrs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sparsevctrs: Sparse Vectors For Use in Data Frames — sparsevctrs-package","title":"sparsevctrs: Sparse Vectors For Use in Data Frames — sparsevctrs-package","text":"Provides sparse vectors powered ALTREP behave like regular vectors, can thus used data frames. Also provides tools convert sparse matrices data frames sparse columns functions interact sparse vectors.","code":""},{"path":[]},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/sparsevctrs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sparsevctrs: Sparse Vectors For Use in Data Frames — sparsevctrs-package","text":"Maintainer: Emil Hvitfeldt emilhhvitfeldt@gmail.com (ORCID)","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/type-predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse vector type checkers — type-predicates","title":"Sparse vector type checkers — type-predicates","text":"Helper functions determine whether vector sparse vector .","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/type-predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse vector type checkers — type-predicates","text":"","code":"is_sparse_vector(x)  is_sparse_double(x)  is_sparse_integer(x)  is_sparse_character(x)  is_sparse_logical(x)"},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/type-predicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse vector type checkers — type-predicates","text":"x value checked.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/type-predicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse vector type checkers — type-predicates","text":"is_sparse_vector() general function detects type sparse vector created package. is_sparse_double(), is_sparse_integer(), is_sparse_character() specific functions detects type.","code":""},{"path":"https://emilhvitfeldt.github.io/sparsevctrs/reference/type-predicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse vector type checkers — type-predicates","text":"","code":"x_sparse <- sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10) x_dense <- c(0, pi, 0, 0, 0.5, 0, 0, 0, 0, 0.1)  is_sparse_vector(x_sparse) #> [1] TRUE is_sparse_vector(x_dense) #> [1] FALSE  is_sparse_double(x_sparse) #> [1] TRUE is_sparse_double(x_dense) #> [1] FALSE  is_sparse_character(x_sparse) #> [1] FALSE is_sparse_character(x_dense) #> [1] FALSE  # Forced materialization is_sparse_vector(x_sparse[]) #> [1] FALSE"}]
